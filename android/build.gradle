apply plugin: 'com.android.application'

android {
    namespace 'ai.flow'
    compileSdkVersion 34
    ndkVersion "21.1.6352462"
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            assets.srcDirs = ['../selfdrive/assets']
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            //.srcDirs = ['../selfdrive/assets']
            jniLibs.srcDirs = ['libs']
            // exclude onnx models from apk.
            sourceSets.main.res.filter.exclude '**/supercombo.onnx'
        }
    }
    packagingOptions {
        // Preventing from license violations (more or less):
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/LICENSE'
        exclude 'META-INF/native-image/**'
        exclude '**/supercombo.onnx'
        pickFirst '**/nd4j-native.properties'
        pickFirst '**/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libthneed.so'
        pickFirst 'services.yaml'
        // Excluding unnecessary meta-data:
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies.txt'
    }

    defaultConfig {
        applicationId 'ai.flow.android'
        minSdkVersion 30
        targetSdkVersion 30
        versionCode 1
        ndk {
            abiFilters "arm64-v8a"
        }

        // set app version
        versionName = rootProject.file('common/version.h').text.split("\"")[1].trim()
    }


    compileOptions {
        sourceCompatibility "8.0"
        targetCompatibility "8.0"
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }
    }
}

repositories {
    google()
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

configurations { natives }

dependencies {
//    implementation "io.github.crow-misia.libyuv:libyuv-android:0.28.0"
//    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))
    implementation project(path: ':definitions')
    implementation project(path: ':messaging')
    implementation project(":hardware")
//    implementation 'com.google.android.material:material:1.4.0'
//    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation project(path: ':launcher')
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation project(":messaging")
    implementation project(":common")
    implementation project(":sensord")
    implementation project(':ui')
    implementation project(':modeld')
    def camerax_version = "1.4.0-rc04"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_version"
    implementation "androidx.camera:camera-video:$camerax_version"
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    implementation "org.bytedeco:opencv:$opencvVersion"

    implementation("org.nd4j:nd4j-native-platform:$rootProject.nd4j_version")
            {
                exclude((HashMap) [group: 'org.bytedeco', module: 'openblas-platform'])
                exclude((HashMap) [group: 'org.bytedeco', module: 'mkl-platform'])
                exclude((HashMap) [group: 'org.nd4j', module: 'nd4j-native'])
                exclude((HashMap) [group: 'org.nd4j', module: 'guava:1.0.0-M1.1'])
            }
    implementation "org.bytedeco:javacpp:$rootProject.javacpp_version"
    implementation "org.bytedeco:javacpp:$rootProject.javacpp_version:android-arm64"
    implementation "org.nd4j:nd4j-native:$rootProject.nd4j_version"
    implementation "org.nd4j:nd4j-native:$rootProject.nd4j_version:android-arm64"
    implementation "org.bytedeco:openblas:$rootProject.openblas_version-$rootProject.javacpp_version"
    implementation "org.bytedeco:openblas:$rootProject.openblas_version-$rootProject.javacpp_version:android-arm64"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
//	implementation(name: 'snpe-release', ext:'aar')
//	implementation(name: 'onnxruntime-android-1.16.0', ext:'aar')
    implementation(name: 'openpilot-0.1-arm64-v8a-debug', ext: 'aar')
    implementation "org.capnproto:runtime:0.1.13"
//    implementation('com.termux.termux-app:termux-shared:0.117') {
//        exclude((HashMap) [group: 'com.google.code.findbugs', module: 'annotations'])
//        exclude((HashMap) [group: 'com.google.code.findbugs', module: 'jsr305'])
//        exclude((HashMap) [group: 'com.google.guava', module: 'guava'])
//    }

    def acraVersion = "5.8.4"
    implementation "ch.acra:acra-http:$acraVersion"
    implementation "ch.acra:acra-toast:$acraVersion"
    implementation "ch.acra:acra-limiter:$acraVersion"

    implementation "com.squareup.okhttp3:okhttp:4.10.0"

    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
    implementation 'com.github.jiangdongguo:AndroidUSBCamera:2.3.6'
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    doFirst {
        file("libs/arm64-v8a/").mkdirs()

        configurations.getByName("natives").copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'ai.flow.android/ai.flow.android.AndroidLauncher'
}
